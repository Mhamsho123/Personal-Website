{"ast":null,"code":"import { Directive, Input, InjectionToken, inject, PLATFORM_ID, isDevMode, ɵɵdefineInjectable, ɵɵinject, Injectable, Inject, Optional, ElementRef, Host, APP_INITIALIZER, APP_BOOTSTRAP_LISTENER, NgModule } from '@angular/core';\nimport { isPlatformBrowser, DOCUMENT, CommonModule } from '@angular/common';\nimport { fromEvent } from 'rxjs';\nimport { __awaiter } from 'tslib';\nimport { Router, NavigationEnd } from '@angular/router';\nimport { filter, skip } from 'rxjs/operators';\nclass GaEventCategoryDirective {\n  constructor() {}\n}\nGaEventCategoryDirective.decorators = [{\n  type: Directive,\n  args: [{\n    selector: `[gaEvent][gaCategory],\n             [gaCategory]`,\n    exportAs: 'gaCategory'\n  }]\n}];\nGaEventCategoryDirective.ctorParameters = () => [];\nGaEventCategoryDirective.propDecorators = {\n  gaCategory: [{\n    type: Input\n  }]\n};\n\n/**\n * Provide a Injection Token to global settings.\n */\nconst NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN = new InjectionToken('ngx-google-analytics-settings', {\n  factory: () => ({\n    trackingCode: '',\n    enableTracing: false\n  })\n});\n\n/**\n * Check if this environment can access Window object and return window or null if false.\n */\nfunction getWindow(platformId) {\n  return isPlatformBrowser(platformId) ? window : null;\n}\n/**\n * Provide DOM Window reference or null if the environment is not a Browser.\n */\nconst NGX_WINDOW = new InjectionToken('ngx-window', {\n  providedIn: 'root',\n  factory: () => getWindow(inject(PLATFORM_ID))\n});\n\n/**\n * Check if there is some global function called gtag on Window object, or create an empty function to doesn't brake codes...\n */\nfunction getDataLayerFn(window) {\n  return window ? window['dataLayer'] = window['dataLayer'] || [] : null;\n}\n/**\n * Provides an injection token to access Google Analytics DataLayer Collection\n */\nconst NGX_DATA_LAYER = new InjectionToken('ngx-data-layer', {\n  providedIn: 'root',\n  factory: () => getDataLayerFn(inject(NGX_WINDOW))\n});\n\n/**\n * Check if there is some global function called gtag on Window object, or create an empty function to doesn't brake codes...\n */\nfunction getGtagFn(window, dataLayer) {\n  return window ? window['gtag'] = window['gtag'] || function () {\n    dataLayer.push(arguments);\n  } : null;\n}\n/**\n * Provides an injection token to access Google Analytics Gtag Function\n */\nconst NGX_GTAG_FN = new InjectionToken('ngx-gtag-fn', {\n  providedIn: 'root',\n  factory: () => getGtagFn(inject(NGX_WINDOW), inject(NGX_DATA_LAYER))\n});\nclass GoogleAnalyticsService {\n  constructor(settings, _document, _gtag) {\n    this.settings = settings;\n    this._document = _document;\n    this._gtag = _gtag;\n  }\n  get document() {\n    return this._document;\n  }\n  throw(err) {\n    if ((this.settings.enableTracing || isDevMode()) && console && console.error) {\n      console.error(err);\n    }\n  }\n  /** @todo Change this to `Object.fromEntity()` in the future... */\n  toKeyValue(map) {\n    return map.size > 0 ? Array.from(map).reduce((obj, [key, value]) => Object.defineProperty(obj, key, {\n      value,\n      enumerable: true\n    }), {}) : undefined;\n  }\n  /**\n   * Call native GA Tag\n   */\n  gtag(...args) {\n    try {\n      this._gtag(...args.filter(x => x !== undefined));\n    } catch (err) {\n      this.throw(err);\n    }\n  }\n  /**\n   * Send an event trigger to GA. It is the same as call:\n   * ```js\n   * gtag('event', 'video_auto_play_start', {\n   *   'event_label': 'My promotional video',\n   *   'event_category': 'video_auto_play'\n   * });\n   * ```\n   *\n   * @param action 'video_auto_play_start'\n   * @param category 'video_auto_play'\n   * @param label 'My promotional video'\n   * @param value An value to measure something\n   */\n  event(action, category, label, value, interaction) {\n    try {\n      const opt = new Map();\n      if (category) {\n        opt.set('event_category', category);\n      }\n      if (label) {\n        opt.set('event_label', label);\n      }\n      if (value) {\n        opt.set('value', value);\n      }\n      if (interaction !== undefined) {\n        opt.set('interaction', interaction);\n      }\n      const params = this.toKeyValue(opt);\n      if (params) {\n        this.gtag('event', action, params);\n      } else {\n        this.gtag('event', action);\n      }\n    } catch (error) {\n      this.throw(error);\n    }\n  }\n  /**\n   * Send an page view event. This is the same as\n   *\n   * ```js\n   * gtag('config', 'GA_TRACKING_ID', {\n   *   'page_title' : 'Homepage',\n   *   'page_path': '/home'\n   * });\n   * ```\n   *\n   * The tracking ID is injected automatically by Inject Token NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN\n   *\n   * @param path /home\n   * @param title Homepage\n   * @param location '{ page_location }'\n   * @param options '{ ... custom dimentions }'\n   */\n  pageView(path, title, location, options) {\n    try {\n      const opt = new Map([['page_path', path]]);\n      if (title) {\n        opt.set('page_title', title);\n      }\n      if (location || this.document) {\n        opt.set('page_location', location || this.document.location.href);\n      }\n      if (options) {\n        Object.entries(options).map(([key, value]) => opt.set(key, value));\n      }\n      this.gtag('config', this.settings.trackingCode, this.toKeyValue(opt));\n    } catch (error) {\n      this.throw(error);\n    }\n  }\n  /**\n   * Send an event to report a App Page View. It is the same as\n   *\n   * ```js\n   * gtag('event', 'screen_view', {\n   *   'app_name': 'myAppName',\n   *   'screen_name' : 'Home'\n   * });\n   *\n   * ```\n   *\n   * @param screen 'screen_name'\n   * @param appName 'app_name'\n   * @param appId 'app_id'\n   * @param appVersion 'app_version'\n   * @param installerId 'app_installer_id'\n   */\n  appView(screen, appName, appId, appVersion, installerId) {\n    try {\n      const opt = new Map([['screen_name', screen], ['app_name', appName]]);\n      if (appId) {\n        opt.set('app_id', appId);\n      }\n      if (appVersion) {\n        opt.set('app_version', appVersion);\n      }\n      if (installerId) {\n        opt.set('app_installer_id', installerId);\n      }\n      this.gtag('event', 'screen_view', this.toKeyValue(opt));\n    } catch (error) {\n      this.throw(error);\n    }\n  }\n  /**\n   * Defines persistent values on GoogleAnalytics\n   *\n   * @see https://developers.google.com/analytics/devguides/collection/gtagjs/setting-values\n   *\n   * ```js\n   * gtag('set', {\n   *   'currency': 'USD',\n   *   'country': 'US'\n   * });\n   * ```\n   */\n  set(...options) {\n    try {\n      this._gtag('set', ...options);\n    } catch (err) {\n      this.throw(err);\n    }\n  }\n  /**\n   * Send an event to GA to report an application error. It is the same as\n   *\n   * ```js\n   * gtag('event', 'exception', {\n   *   'description': 'error_description',\n   *   'fatal': false   // set to true if the error is fatal\n   * });\n   * ```\n   *\n   * @param description 'error_description'\n   * @param fatal set to true if the error is fatal\n   */\n  exception(description, fatal) {\n    try {\n      const opt = new Map();\n      if (description) {\n        opt.set('description', description);\n      }\n      if (fatal) {\n        opt.set('fatal', fatal);\n      }\n      const params = this.toKeyValue(opt);\n      if (params) {\n        this.gtag('event', 'exception', this.toKeyValue(opt));\n      } else {\n        this.gtag('event', 'exception');\n      }\n    } catch (error) {\n      this.throw(error);\n    }\n  }\n}\nGoogleAnalyticsService.ɵprov = ɵɵdefineInjectable({\n  factory: function GoogleAnalyticsService_Factory() {\n    return new GoogleAnalyticsService(ɵɵinject(NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN), ɵɵinject(DOCUMENT), ɵɵinject(NGX_GTAG_FN));\n  },\n  token: GoogleAnalyticsService,\n  providedIn: \"root\"\n});\nGoogleAnalyticsService.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\nGoogleAnalyticsService.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [NGX_GTAG_FN]\n  }]\n}];\nclass GaEventDirective {\n  constructor(gaCategoryDirective, gaService, settings, el) {\n    this.gaCategoryDirective = gaCategoryDirective;\n    this.gaService = gaService;\n    this.settings = settings;\n    this.el = el;\n    this.gaBind = 'click';\n  }\n  set gaBind(gaBind) {\n    if (this.bindSubscription) {\n      this.bindSubscription.unsubscribe();\n    }\n    this._gaBind = gaBind;\n    this.bindSubscription = fromEvent(this.el.nativeElement, gaBind).subscribe(() => this.trigger());\n  }\n  get gaBind() {\n    return this._gaBind;\n  }\n  ngOnDestroy() {\n    if (this.bindSubscription) {\n      this.bindSubscription.unsubscribe();\n    }\n  }\n  trigger() {\n    try {\n      // Observação: não é obrigatório especificar uma categoria, uma etiqueta ou um valor. Consulte Eventos padrão do Google Analytics abaixo.\n      // if (!this.$gaCategoryDirective) {\n      //   throw new Error('You must provide a gaCategory attribute w/ gaEvent Directive.');\n      // }\n      if (!this.gaAction && !this.gaEvent) {\n        throw new Error('You must provide a gaAction attribute to identify this event.');\n      }\n      this.gaService.event(this.gaAction || this.gaEvent, this.gaCategoryDirective ? this.gaCategoryDirective.gaCategory : undefined, this.gaLabel || this.label, this.gaValue, this.gaInteraction);\n    } catch (err) {\n      this.throw(err);\n    }\n  }\n  throw(err) {\n    if ((isDevMode() || this.settings.enableTracing) && console && console.warn) {\n      console.warn(err);\n    }\n  }\n}\nGaEventDirective.decorators = [{\n  type: Directive,\n  args: [{\n    selector: `[gaEvent]`,\n    exportAs: 'gaEvent'\n  }]\n}];\nGaEventDirective.ctorParameters = () => [{\n  type: GaEventCategoryDirective,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: GoogleAnalyticsService\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN]\n  }]\n}, {\n  type: ElementRef\n}];\nGaEventDirective.propDecorators = {\n  gaAction: [{\n    type: Input\n  }],\n  gaLabel: [{\n    type: Input\n  }],\n  label: [{\n    type: Input\n  }],\n  gaValue: [{\n    type: Input\n  }],\n  gaInteraction: [{\n    type: Input\n  }],\n  gaEvent: [{\n    type: Input\n  }],\n  gaBind: [{\n    type: Input\n  }]\n};\nclass GaEventFormInputDirective {\n  constructor(gaEvent) {\n    this.gaEvent = gaEvent;\n    this.gaBind = 'focus';\n  }\n  set gaBind(bind) {\n    if (this.gaEvent) {\n      this.gaEvent.gaBind = bind;\n    }\n  }\n}\nGaEventFormInputDirective.decorators = [{\n  type: Directive,\n  args: [{\n    selector: `input[gaEvent],\n             select[gaEvent],\n             textarea[gaEvent]`\n  }]\n}];\nGaEventFormInputDirective.ctorParameters = () => [{\n  type: GaEventDirective,\n  decorators: [{\n    type: Host\n  }, {\n    type: Optional\n  }]\n}];\nGaEventFormInputDirective.propDecorators = {\n  gaBind: [{\n    type: Input\n  }]\n};\nvar GaActionEnum;\n(function (GaActionEnum) {\n  GaActionEnum[\"ADD_PAYMENT_INFO\"] = \"add_payment_info\";\n  GaActionEnum[\"ADD_TO_CART\"] = \"add_to_cart\";\n  GaActionEnum[\"ADD_TO_WISHLIST\"] = \"add_to_wishlist\";\n  GaActionEnum[\"BEGIN_CHECKOUT\"] = \"begin_checkout\";\n  GaActionEnum[\"CHECKOUT_PROGRESS\"] = \"checkout_progress\";\n  GaActionEnum[\"GENERATE_LEAD\"] = \"generate_lead\";\n  GaActionEnum[\"LOGIN\"] = \"login\";\n  GaActionEnum[\"PURCHASE\"] = \"purchase\";\n  GaActionEnum[\"REFUND\"] = \"refund\";\n  GaActionEnum[\"REMOVE_FROM_CART\"] = \"remove_from_cart\";\n  GaActionEnum[\"SEARCH\"] = \"search\";\n  GaActionEnum[\"SELECT_CONTENT\"] = \"select_content\";\n  GaActionEnum[\"SET_CHECKOUT_OPTION\"] = \"set_checkout_option\";\n  GaActionEnum[\"SHARE\"] = \"share\";\n  GaActionEnum[\"SIGN_UP\"] = \"sign_up\";\n  GaActionEnum[\"VIEW_ITEM\"] = \"view_item\";\n  GaActionEnum[\"VIEW_ITEM_LIST\"] = \"view_item_list\";\n  GaActionEnum[\"VIEW_PROMOTION\"] = \"view_promotion\";\n  GaActionEnum[\"VIEW_SEARCH_RESULT\"] = \"view_search_results\";\n  GaActionEnum[\"VIEW_SEARCH_RESULTS\"] = \"view_search_results\";\n})(GaActionEnum || (GaActionEnum = {}));\n\n/**\n * Provide a DI Configuration to attach GA Initialization at Angular Startup Cycle.\n */\nconst NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: GoogleAnalyticsInitializer,\n  deps: [NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN, NGX_GTAG_FN, DOCUMENT]\n};\n/**\n * Create a script element on DOM and link it to Google Analytics tracking code URI.\n * After that, execute exactly same init process as tracking snippet code.\n */\nfunction GoogleAnalyticsInitializer(settings, gtag, document) {\n  return () => __awaiter(this, void 0, void 0, function* () {\n    var _a;\n    if (!settings.trackingCode) {\n      if (!isDevMode()) {\n        console.error('Empty tracking code for Google Analytics. Make sure to provide one when initializing NgxGoogleAnalyticsModule.');\n      }\n      return;\n    }\n    if (!gtag) {\n      if (!isDevMode()) {\n        console.error('Was not possible create or read gtag() fn. Make sure this module is running on a Browser w/ access to Window interface.');\n      }\n      return;\n    }\n    if (!document) {\n      if (!isDevMode()) {\n        console.error('Was not possible to access Document interface. Make sure this module is running on a Browser w/ access do Document interface.');\n      }\n    }\n    // Set default ga.js uri\n    settings.uri = settings.uri || `https://www.googletagmanager.com/gtag/js?id=${settings.trackingCode}`;\n    // these commands should run first!\n    settings.initCommands = (_a = settings === null || settings === void 0 ? void 0 : settings.initCommands) !== null && _a !== void 0 ? _a : [];\n    // assert config command\n    if (!settings.initCommands.find(x => x.command === 'config')) {\n      settings.initCommands.unshift({\n        command: 'config',\n        values: [settings.trackingCode]\n      });\n    }\n    // assert js command\n    if (!settings.initCommands.find(x => x.command === 'js')) {\n      settings.initCommands.unshift({\n        command: 'js',\n        values: [new Date()]\n      });\n    }\n    for (const command of settings.initCommands) {\n      gtag(command.command, ...command.values);\n    }\n    const s = document.createElement('script');\n    s.async = true;\n    s.src = settings.uri;\n    if (settings.nonce) {\n      s.setAttribute('nonce', settings.nonce);\n    }\n    const head = document.getElementsByTagName('head')[0];\n    head.appendChild(s);\n  });\n}\n\n/**\n * Provide a Injection Token to global settings.\n */\nconst NGX_GOOGLE_ANALYTICS_ROUTING_SETTINGS_TOKEN = new InjectionToken('ngx-google-analytics-routing-settings', {\n  factory: () => ({})\n});\n\n/**\n * Provide a DI Configuration to attach GA Trigger to Router Events at Angular Startup Cycle.\n */\nconst NGX_GOOGLE_ANALYTICS_ROUTER_INITIALIZER_PROVIDER = {\n  provide: APP_BOOTSTRAP_LISTENER,\n  multi: true,\n  useFactory: GoogleAnalyticsRouterInitializer,\n  deps: [NGX_GOOGLE_ANALYTICS_ROUTING_SETTINGS_TOKEN, GoogleAnalyticsService]\n};\n/**\n * Attach a listener to `NavigationEnd` Router event. So, every time Router finish the page resolution it should call `NavigationEnd` event.\n * We assume that NavigationEnd is the final page resolution and call GA `page_view` command.\n *\n * To avoid double binds, we also destroy the subscription when de Bootstrap Component is destroied. But, we don't know for sure\n * that this strategy does not cause double bind on multiple bootstrap components.\n *\n * We are using de component's injector reference to resolve Router, sou I hope there is no problem w/ double bing.\n *\n * If you have this problem, I encourage not Use NgxGoogleAnalyticsRouterModule and atach the listener on AppComponent initialization.\n */\nfunction GoogleAnalyticsRouterInitializer(settings, gaService) {\n  return c => __awaiter(this, void 0, void 0, function* () {\n    const router = c.injector.get(Router);\n    const {\n      include = [],\n      exclude = []\n    } = settings !== null && settings !== void 0 ? settings : {};\n    const includeRules = normalizePathRules(include);\n    const excludeRules = normalizePathRules(exclude);\n    const subs = router.events.pipe(filter(event => event instanceof NavigationEnd), skip(1),\n    // Prevend double views on the first tigger (because GA Already send one ping on setup)\n    filter(event => includeRules.length > 0 ? includeRules.some(rule => rule.test(event.urlAfterRedirects)) : true), filter(event => excludeRules.length > 0 ? !excludeRules.some(rule => rule.test(event.urlAfterRedirects)) : true)).subscribe(event => gaService.pageView(event.urlAfterRedirects, undefined));\n    // Cleanup\n    c.onDestroy(() => subs.unsubscribe());\n  });\n}\n/** Converts all path rules from string to Regex instances */\nfunction normalizePathRules(rules) {\n  return rules.map(rule => rule instanceof RegExp ? rule : new RegExp(`^${rule.replace('*', '.*')}$`, 'i'));\n}\n\n/**\n * Install Google Analytics Tracking code on your environment and configure tracking ID.\n *\n * This module should be a dependency on the highest level module of the application, i.e. AppModule in most use cases.\n */\nclass NgxGoogleAnalyticsModule {\n  /**\n   * You should provide a valid Google TrackingCode. This code will be provided to the entire application by\n   * `NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN` token. You can inject this code in you components if you like by\n   * use the following injection code `@Inject(NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN) gaConfig: IGoogleAnalyticsSettings`\n   *\n   * @param trackingCode The Google Tracking Code\n   * @param initCommands When placed, it will run any GA Commands in sequence after setup GA environment.\n   * @param uri When placed, it will change the default js URI to the provided one.\n   * @param enableTracing When true, trace GA tracking errors on production mode.\n   * @param nonce When placed, nonce will be added to script tag.\n   */\n  static forRoot(trackingCode, initCommands = [], uri, enableTracing, nonce) {\n    return {\n      ngModule: NgxGoogleAnalyticsModule,\n      providers: [{\n        provide: NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN,\n        useValue: {\n          trackingCode,\n          initCommands,\n          uri,\n          enableTracing,\n          nonce\n        }\n      }, NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER]\n    };\n  }\n}\nNgxGoogleAnalyticsModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [],\n    declarations: [GaEventDirective, GaEventCategoryDirective, GaEventFormInputDirective],\n    exports: [GaEventDirective, GaEventCategoryDirective, GaEventFormInputDirective]\n  }]\n}];\n\n/**\n * Attach a listener to `NavigationEnd` Router event. So, every time Router finish the page resolution it should call `NavigationEnd` event.\n * We assume that NavigationEnd is the final page resolution and call GA `page_view` command.\n *\n * To avoid double binds, we also destroy the subscription when de Bootstrap Component is destroied. But, we don't know for sure\n * that this strategy does not cause double bind on multiple bootstrap components.\n *\n * We are using de component's injector reference to resolve Router, sou I hope there is no problem w/ double bing.\n *\n * If you have this problem, I encourage not Use NgxGoogleAnalyticsRouterModule and atach the listener on AppComponent initialization.\n *\n * This Module is just a sugar for:\n *\n```typescript\nconstructor(private router: Router) {}\n...\nngOnInit() {\n  ...\n  this.router\n    .events\n    .pipe(takeUntil(this.onDestroy$))\n    .subscribe(event => {\n      if (event instanceof NavigationEnd) {\n        gaService.pageView(event.urlAfterRedirects, undefined);\n      }\n    });\n```\n */\nclass NgxGoogleAnalyticsRouterModule {\n  static forRoot(settings) {\n    return {\n      ngModule: NgxGoogleAnalyticsRouterModule,\n      providers: [{\n        provide: NGX_GOOGLE_ANALYTICS_ROUTING_SETTINGS_TOKEN,\n        useValue: settings !== null && settings !== void 0 ? settings : {}\n      }]\n    };\n  }\n}\nNgxGoogleAnalyticsRouterModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule, NgxGoogleAnalyticsModule],\n    providers: [NGX_GOOGLE_ANALYTICS_ROUTER_INITIALIZER_PROVIDER],\n    declarations: []\n  }]\n}];\n\n/*\n * Public API Surface of ngx-google-analytics\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { GaActionEnum, GaEventCategoryDirective, GaEventDirective, GaEventFormInputDirective, GoogleAnalyticsInitializer, GoogleAnalyticsRouterInitializer, GoogleAnalyticsService, NGX_DATA_LAYER, NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER, NGX_GOOGLE_ANALYTICS_ROUTER_INITIALIZER_PROVIDER, NGX_GOOGLE_ANALYTICS_ROUTING_SETTINGS_TOKEN, NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN, NGX_GTAG_FN, NGX_WINDOW, NgxGoogleAnalyticsModule, NgxGoogleAnalyticsRouterModule, getDataLayerFn, getGtagFn, getWindow };","map":{"version":3,"names":["Directive","Input","InjectionToken","inject","PLATFORM_ID","isDevMode","ɵɵdefineInjectable","ɵɵinject","Injectable","Inject","Optional","ElementRef","Host","APP_INITIALIZER","APP_BOOTSTRAP_LISTENER","NgModule","isPlatformBrowser","DOCUMENT","CommonModule","fromEvent","__awaiter","Router","NavigationEnd","filter","skip","GaEventCategoryDirective","constructor","decorators","type","args","selector","exportAs","ctorParameters","propDecorators","gaCategory","NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN","factory","trackingCode","enableTracing","getWindow","platformId","window","NGX_WINDOW","providedIn","getDataLayerFn","NGX_DATA_LAYER","getGtagFn","dataLayer","push","arguments","NGX_GTAG_FN","GoogleAnalyticsService","settings","_document","_gtag","document","throw","err","console","error","toKeyValue","map","size","Array","from","reduce","obj","key","value","Object","defineProperty","enumerable","undefined","gtag","x","event","action","category","label","interaction","opt","Map","set","params","pageView","path","title","location","options","href","entries","appView","screen","appName","appId","appVersion","installerId","exception","description","fatal","ɵprov","GoogleAnalyticsService_Factory","token","GaEventDirective","gaCategoryDirective","gaService","el","gaBind","bindSubscription","unsubscribe","_gaBind","nativeElement","subscribe","trigger","ngOnDestroy","gaAction","gaEvent","Error","gaLabel","gaValue","gaInteraction","warn","GaEventFormInputDirective","bind","GaActionEnum","NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER","provide","multi","useFactory","GoogleAnalyticsInitializer","deps","_a","uri","initCommands","find","command","unshift","values","Date","s","createElement","async","src","nonce","setAttribute","head","getElementsByTagName","appendChild","NGX_GOOGLE_ANALYTICS_ROUTING_SETTINGS_TOKEN","NGX_GOOGLE_ANALYTICS_ROUTER_INITIALIZER_PROVIDER","GoogleAnalyticsRouterInitializer","c","router","injector","get","include","exclude","includeRules","normalizePathRules","excludeRules","subs","events","pipe","length","some","rule","test","urlAfterRedirects","onDestroy","rules","RegExp","replace","NgxGoogleAnalyticsModule","forRoot","ngModule","providers","useValue","imports","declarations","exports","NgxGoogleAnalyticsRouterModule"],"sources":["/Users/mohamadhamsho/Desktop/Personal-Website-main/node_modules/ngx-google-analytics/fesm2015/ngx-google-analytics.js"],"sourcesContent":["import { Directive, Input, InjectionToken, inject, PLATFORM_ID, isDevMode, ɵɵdefineInjectable, ɵɵinject, Injectable, Inject, Optional, ElementRef, Host, APP_INITIALIZER, APP_BOOTSTRAP_LISTENER, NgModule } from '@angular/core';\nimport { isPlatformBrowser, DOCUMENT, CommonModule } from '@angular/common';\nimport { fromEvent } from 'rxjs';\nimport { __awaiter } from 'tslib';\nimport { Router, NavigationEnd } from '@angular/router';\nimport { filter, skip } from 'rxjs/operators';\n\nclass GaEventCategoryDirective {\n    constructor() { }\n}\nGaEventCategoryDirective.decorators = [\n    { type: Directive, args: [{\n                selector: `[gaEvent][gaCategory],\n             [gaCategory]`,\n                exportAs: 'gaCategory'\n            },] }\n];\nGaEventCategoryDirective.ctorParameters = () => [];\nGaEventCategoryDirective.propDecorators = {\n    gaCategory: [{ type: Input }]\n};\n\n/**\n * Provide a Injection Token to global settings.\n */\nconst NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN = new InjectionToken('ngx-google-analytics-settings', {\n    factory: () => ({ trackingCode: '', enableTracing: false })\n});\n\n/**\n * Check if this environment can access Window object and return window or null if false.\n */\nfunction getWindow(platformId) {\n    return (isPlatformBrowser(platformId))\n        ? window : null;\n}\n/**\n * Provide DOM Window reference or null if the environment is not a Browser.\n */\nconst NGX_WINDOW = new InjectionToken('ngx-window', {\n    providedIn: 'root',\n    factory: () => getWindow(inject(PLATFORM_ID)),\n});\n\n/**\n * Check if there is some global function called gtag on Window object, or create an empty function to doesn't brake codes...\n */\nfunction getDataLayerFn(window) {\n    return (window)\n        ? window['dataLayer'] = window['dataLayer'] || []\n        : null;\n}\n/**\n * Provides an injection token to access Google Analytics DataLayer Collection\n */\nconst NGX_DATA_LAYER = new InjectionToken('ngx-data-layer', {\n    providedIn: 'root',\n    factory: () => getDataLayerFn(inject(NGX_WINDOW))\n});\n\n/**\n * Check if there is some global function called gtag on Window object, or create an empty function to doesn't brake codes...\n */\nfunction getGtagFn(window, dataLayer) {\n    return (window)\n        ? window['gtag'] = window['gtag'] || function () {\n            dataLayer.push(arguments);\n        }\n        : null;\n}\n/**\n * Provides an injection token to access Google Analytics Gtag Function\n */\nconst NGX_GTAG_FN = new InjectionToken('ngx-gtag-fn', {\n    providedIn: 'root',\n    factory: () => getGtagFn(inject(NGX_WINDOW), inject(NGX_DATA_LAYER))\n});\n\nclass GoogleAnalyticsService {\n    constructor(settings, _document, _gtag) {\n        this.settings = settings;\n        this._document = _document;\n        this._gtag = _gtag;\n    }\n    get document() {\n        return this._document;\n    }\n    throw(err) {\n        if ((this.settings.enableTracing || isDevMode()) && console && console.error) {\n            console.error(err);\n        }\n    }\n    /** @todo Change this to `Object.fromEntity()` in the future... */\n    toKeyValue(map) {\n        return (map.size > 0)\n            ? Array.from(map).reduce((obj, [key, value]) => Object.defineProperty(obj, key, { value, enumerable: true }), {})\n            : undefined;\n    }\n    /**\n     * Call native GA Tag\n     */\n    gtag(...args) {\n        try {\n            this._gtag(...args.filter(x => x !== undefined));\n        }\n        catch (err) {\n            this.throw(err);\n        }\n    }\n    /**\n     * Send an event trigger to GA. It is the same as call:\n     * ```js\n     * gtag('event', 'video_auto_play_start', {\n     *   'event_label': 'My promotional video',\n     *   'event_category': 'video_auto_play'\n     * });\n     * ```\n     *\n     * @param action 'video_auto_play_start'\n     * @param category 'video_auto_play'\n     * @param label 'My promotional video'\n     * @param value An value to measure something\n     */\n    event(action, category, label, value, interaction) {\n        try {\n            const opt = new Map();\n            if (category) {\n                opt.set('event_category', category);\n            }\n            if (label) {\n                opt.set('event_label', label);\n            }\n            if (value) {\n                opt.set('value', value);\n            }\n            if (interaction !== undefined) {\n                opt.set('interaction', interaction);\n            }\n            const params = this.toKeyValue(opt);\n            if (params) {\n                this.gtag('event', action, params);\n            }\n            else {\n                this.gtag('event', action);\n            }\n        }\n        catch (error) {\n            this.throw(error);\n        }\n    }\n    /**\n     * Send an page view event. This is the same as\n     *\n     * ```js\n     * gtag('config', 'GA_TRACKING_ID', {\n     *   'page_title' : 'Homepage',\n     *   'page_path': '/home'\n     * });\n     * ```\n     *\n     * The tracking ID is injected automatically by Inject Token NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN\n     *\n     * @param path /home\n     * @param title Homepage\n     * @param location '{ page_location }'\n     * @param options '{ ... custom dimentions }'\n     */\n    pageView(path, title, location, options) {\n        try {\n            const opt = new Map([['page_path', path]]);\n            if (title) {\n                opt.set('page_title', title);\n            }\n            if (location || this.document) {\n                opt.set('page_location', (location || this.document.location.href));\n            }\n            if (options) {\n                Object\n                    .entries(options)\n                    .map(([key, value]) => opt.set(key, value));\n            }\n            this.gtag('config', this.settings.trackingCode, this.toKeyValue(opt));\n        }\n        catch (error) {\n            this.throw(error);\n        }\n    }\n    /**\n     * Send an event to report a App Page View. It is the same as\n     *\n     * ```js\n     * gtag('event', 'screen_view', {\n     *   'app_name': 'myAppName',\n     *   'screen_name' : 'Home'\n     * });\n     *\n     * ```\n     *\n     * @param screen 'screen_name'\n     * @param appName 'app_name'\n     * @param appId 'app_id'\n     * @param appVersion 'app_version'\n     * @param installerId 'app_installer_id'\n     */\n    appView(screen, appName, appId, appVersion, installerId) {\n        try {\n            const opt = new Map([['screen_name', screen], ['app_name', appName]]);\n            if (appId) {\n                opt.set('app_id', appId);\n            }\n            if (appVersion) {\n                opt.set('app_version', appVersion);\n            }\n            if (installerId) {\n                opt.set('app_installer_id', installerId);\n            }\n            this.gtag('event', 'screen_view', this.toKeyValue(opt));\n        }\n        catch (error) {\n            this.throw(error);\n        }\n    }\n    /**\n     * Defines persistent values on GoogleAnalytics\n     *\n     * @see https://developers.google.com/analytics/devguides/collection/gtagjs/setting-values\n     *\n     * ```js\n     * gtag('set', {\n     *   'currency': 'USD',\n     *   'country': 'US'\n     * });\n     * ```\n     */\n    set(...options) {\n        try {\n            this._gtag('set', ...options);\n        }\n        catch (err) {\n            this.throw(err);\n        }\n    }\n    /**\n     * Send an event to GA to report an application error. It is the same as\n     *\n     * ```js\n     * gtag('event', 'exception', {\n     *   'description': 'error_description',\n     *   'fatal': false   // set to true if the error is fatal\n     * });\n     * ```\n     *\n     * @param description 'error_description'\n     * @param fatal set to true if the error is fatal\n     */\n    exception(description, fatal) {\n        try {\n            const opt = new Map();\n            if (description) {\n                opt.set('description', description);\n            }\n            if (fatal) {\n                opt.set('fatal', fatal);\n            }\n            const params = this.toKeyValue(opt);\n            if (params) {\n                this.gtag('event', 'exception', this.toKeyValue(opt));\n            }\n            else {\n                this.gtag('event', 'exception');\n            }\n        }\n        catch (error) {\n            this.throw(error);\n        }\n    }\n}\nGoogleAnalyticsService.ɵprov = ɵɵdefineInjectable({ factory: function GoogleAnalyticsService_Factory() { return new GoogleAnalyticsService(ɵɵinject(NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN), ɵɵinject(DOCUMENT), ɵɵinject(NGX_GTAG_FN)); }, token: GoogleAnalyticsService, providedIn: \"root\" });\nGoogleAnalyticsService.decorators = [\n    { type: Injectable, args: [{\n                providedIn: 'root'\n            },] }\n];\nGoogleAnalyticsService.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [NGX_GTAG_FN,] }] }\n];\n\nclass GaEventDirective {\n    constructor(gaCategoryDirective, gaService, settings, el) {\n        this.gaCategoryDirective = gaCategoryDirective;\n        this.gaService = gaService;\n        this.settings = settings;\n        this.el = el;\n        this.gaBind = 'click';\n    }\n    set gaBind(gaBind) {\n        if (this.bindSubscription) {\n            this.bindSubscription.unsubscribe();\n        }\n        this._gaBind = gaBind;\n        this.bindSubscription = fromEvent(this.el.nativeElement, gaBind).subscribe(() => this.trigger());\n    }\n    get gaBind() {\n        return this._gaBind;\n    }\n    ngOnDestroy() {\n        if (this.bindSubscription) {\n            this.bindSubscription.unsubscribe();\n        }\n    }\n    trigger() {\n        try {\n            // Observação: não é obrigatório especificar uma categoria, uma etiqueta ou um valor. Consulte Eventos padrão do Google Analytics abaixo.\n            // if (!this.$gaCategoryDirective) {\n            //   throw new Error('You must provide a gaCategory attribute w/ gaEvent Directive.');\n            // }\n            if (!this.gaAction && !this.gaEvent) {\n                throw new Error('You must provide a gaAction attribute to identify this event.');\n            }\n            this.gaService\n                .event(this.gaAction || this.gaEvent, (this.gaCategoryDirective) ? this.gaCategoryDirective.gaCategory : undefined, this.gaLabel || this.label, this.gaValue, this.gaInteraction);\n        }\n        catch (err) {\n            this.throw(err);\n        }\n    }\n    throw(err) {\n        if ((isDevMode() || this.settings.enableTracing) && console && console.warn) {\n            console.warn(err);\n        }\n    }\n}\nGaEventDirective.decorators = [\n    { type: Directive, args: [{\n                selector: `[gaEvent]`,\n                exportAs: 'gaEvent'\n            },] }\n];\nGaEventDirective.ctorParameters = () => [\n    { type: GaEventCategoryDirective, decorators: [{ type: Optional }] },\n    { type: GoogleAnalyticsService },\n    { type: undefined, decorators: [{ type: Inject, args: [NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN,] }] },\n    { type: ElementRef }\n];\nGaEventDirective.propDecorators = {\n    gaAction: [{ type: Input }],\n    gaLabel: [{ type: Input }],\n    label: [{ type: Input }],\n    gaValue: [{ type: Input }],\n    gaInteraction: [{ type: Input }],\n    gaEvent: [{ type: Input }],\n    gaBind: [{ type: Input }]\n};\n\nclass GaEventFormInputDirective {\n    constructor(gaEvent) {\n        this.gaEvent = gaEvent;\n        this.gaBind = 'focus';\n    }\n    set gaBind(bind) {\n        if (this.gaEvent) {\n            this.gaEvent.gaBind = bind;\n        }\n    }\n}\nGaEventFormInputDirective.decorators = [\n    { type: Directive, args: [{\n                selector: `input[gaEvent],\n             select[gaEvent],\n             textarea[gaEvent]`\n            },] }\n];\nGaEventFormInputDirective.ctorParameters = () => [\n    { type: GaEventDirective, decorators: [{ type: Host }, { type: Optional }] }\n];\nGaEventFormInputDirective.propDecorators = {\n    gaBind: [{ type: Input }]\n};\n\nvar GaActionEnum;\n(function (GaActionEnum) {\n    GaActionEnum[\"ADD_PAYMENT_INFO\"] = \"add_payment_info\";\n    GaActionEnum[\"ADD_TO_CART\"] = \"add_to_cart\";\n    GaActionEnum[\"ADD_TO_WISHLIST\"] = \"add_to_wishlist\";\n    GaActionEnum[\"BEGIN_CHECKOUT\"] = \"begin_checkout\";\n    GaActionEnum[\"CHECKOUT_PROGRESS\"] = \"checkout_progress\";\n    GaActionEnum[\"GENERATE_LEAD\"] = \"generate_lead\";\n    GaActionEnum[\"LOGIN\"] = \"login\";\n    GaActionEnum[\"PURCHASE\"] = \"purchase\";\n    GaActionEnum[\"REFUND\"] = \"refund\";\n    GaActionEnum[\"REMOVE_FROM_CART\"] = \"remove_from_cart\";\n    GaActionEnum[\"SEARCH\"] = \"search\";\n    GaActionEnum[\"SELECT_CONTENT\"] = \"select_content\";\n    GaActionEnum[\"SET_CHECKOUT_OPTION\"] = \"set_checkout_option\";\n    GaActionEnum[\"SHARE\"] = \"share\";\n    GaActionEnum[\"SIGN_UP\"] = \"sign_up\";\n    GaActionEnum[\"VIEW_ITEM\"] = \"view_item\";\n    GaActionEnum[\"VIEW_ITEM_LIST\"] = \"view_item_list\";\n    GaActionEnum[\"VIEW_PROMOTION\"] = \"view_promotion\";\n    GaActionEnum[\"VIEW_SEARCH_RESULT\"] = \"view_search_results\";\n    GaActionEnum[\"VIEW_SEARCH_RESULTS\"] = \"view_search_results\";\n})(GaActionEnum || (GaActionEnum = {}));\n\n/**\n * Provide a DI Configuration to attach GA Initialization at Angular Startup Cycle.\n */\nconst NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER = {\n    provide: APP_INITIALIZER,\n    multi: true,\n    useFactory: GoogleAnalyticsInitializer,\n    deps: [\n        NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN,\n        NGX_GTAG_FN,\n        DOCUMENT\n    ]\n};\n/**\n * Create a script element on DOM and link it to Google Analytics tracking code URI.\n * After that, execute exactly same init process as tracking snippet code.\n */\nfunction GoogleAnalyticsInitializer(settings, gtag, document) {\n    return () => __awaiter(this, void 0, void 0, function* () {\n        var _a;\n        if (!settings.trackingCode) {\n            if (!isDevMode()) {\n                console.error('Empty tracking code for Google Analytics. Make sure to provide one when initializing NgxGoogleAnalyticsModule.');\n            }\n            return;\n        }\n        if (!gtag) {\n            if (!isDevMode()) {\n                console.error('Was not possible create or read gtag() fn. Make sure this module is running on a Browser w/ access to Window interface.');\n            }\n            return;\n        }\n        if (!document) {\n            if (!isDevMode()) {\n                console.error('Was not possible to access Document interface. Make sure this module is running on a Browser w/ access do Document interface.');\n            }\n        }\n        // Set default ga.js uri\n        settings.uri = settings.uri || `https://www.googletagmanager.com/gtag/js?id=${settings.trackingCode}`;\n        // these commands should run first!\n        settings.initCommands = (_a = settings === null || settings === void 0 ? void 0 : settings.initCommands) !== null && _a !== void 0 ? _a : [];\n        // assert config command\n        if (!settings.initCommands.find(x => x.command === 'config')) {\n            settings.initCommands.unshift({ command: 'config', values: [settings.trackingCode] });\n        }\n        // assert js command\n        if (!settings.initCommands.find(x => x.command === 'js')) {\n            settings.initCommands.unshift({ command: 'js', values: [new Date()] });\n        }\n        for (const command of settings.initCommands) {\n            gtag(command.command, ...command.values);\n        }\n        const s = document.createElement('script');\n        s.async = true;\n        s.src = settings.uri;\n        if (settings.nonce) {\n            s.setAttribute('nonce', settings.nonce);\n        }\n        const head = document.getElementsByTagName('head')[0];\n        head.appendChild(s);\n    });\n}\n\n/**\n * Provide a Injection Token to global settings.\n */\nconst NGX_GOOGLE_ANALYTICS_ROUTING_SETTINGS_TOKEN = new InjectionToken('ngx-google-analytics-routing-settings', {\n    factory: () => ({})\n});\n\n/**\n * Provide a DI Configuration to attach GA Trigger to Router Events at Angular Startup Cycle.\n */\nconst NGX_GOOGLE_ANALYTICS_ROUTER_INITIALIZER_PROVIDER = {\n    provide: APP_BOOTSTRAP_LISTENER,\n    multi: true,\n    useFactory: GoogleAnalyticsRouterInitializer,\n    deps: [\n        NGX_GOOGLE_ANALYTICS_ROUTING_SETTINGS_TOKEN,\n        GoogleAnalyticsService\n    ]\n};\n/**\n * Attach a listener to `NavigationEnd` Router event. So, every time Router finish the page resolution it should call `NavigationEnd` event.\n * We assume that NavigationEnd is the final page resolution and call GA `page_view` command.\n *\n * To avoid double binds, we also destroy the subscription when de Bootstrap Component is destroied. But, we don't know for sure\n * that this strategy does not cause double bind on multiple bootstrap components.\n *\n * We are using de component's injector reference to resolve Router, sou I hope there is no problem w/ double bing.\n *\n * If you have this problem, I encourage not Use NgxGoogleAnalyticsRouterModule and atach the listener on AppComponent initialization.\n */\nfunction GoogleAnalyticsRouterInitializer(settings, gaService) {\n    return (c) => __awaiter(this, void 0, void 0, function* () {\n        const router = c.injector.get(Router);\n        const { include = [], exclude = [] } = settings !== null && settings !== void 0 ? settings : {};\n        const includeRules = normalizePathRules(include);\n        const excludeRules = normalizePathRules(exclude);\n        const subs = router\n            .events\n            .pipe(filter((event) => event instanceof NavigationEnd), skip(1), // Prevend double views on the first tigger (because GA Already send one ping on setup)\n        filter(event => includeRules.length > 0\n            ? includeRules.some(rule => rule.test(event.urlAfterRedirects))\n            : true), filter(event => excludeRules.length > 0\n            ? !excludeRules.some(rule => rule.test(event.urlAfterRedirects))\n            : true))\n            .subscribe(event => gaService.pageView(event.urlAfterRedirects, undefined));\n        // Cleanup\n        c.onDestroy(() => subs.unsubscribe());\n    });\n}\n/** Converts all path rules from string to Regex instances */\nfunction normalizePathRules(rules) {\n    return rules.map(rule => (rule instanceof RegExp)\n        ? rule\n        : new RegExp(`^${rule.replace('*', '.*')}$`, 'i'));\n}\n\n/**\n * Install Google Analytics Tracking code on your environment and configure tracking ID.\n *\n * This module should be a dependency on the highest level module of the application, i.e. AppModule in most use cases.\n */\nclass NgxGoogleAnalyticsModule {\n    /**\n     * You should provide a valid Google TrackingCode. This code will be provided to the entire application by\n     * `NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN` token. You can inject this code in you components if you like by\n     * use the following injection code `@Inject(NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN) gaConfig: IGoogleAnalyticsSettings`\n     *\n     * @param trackingCode The Google Tracking Code\n     * @param initCommands When placed, it will run any GA Commands in sequence after setup GA environment.\n     * @param uri When placed, it will change the default js URI to the provided one.\n     * @param enableTracing When true, trace GA tracking errors on production mode.\n     * @param nonce When placed, nonce will be added to script tag.\n     */\n    static forRoot(trackingCode, initCommands = [], uri, enableTracing, nonce) {\n        return {\n            ngModule: NgxGoogleAnalyticsModule,\n            providers: [\n                {\n                    provide: NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN,\n                    useValue: {\n                        trackingCode,\n                        initCommands,\n                        uri,\n                        enableTracing,\n                        nonce\n                    }\n                },\n                NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER,\n            ]\n        };\n    }\n}\nNgxGoogleAnalyticsModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [],\n                declarations: [\n                    GaEventDirective,\n                    GaEventCategoryDirective,\n                    GaEventFormInputDirective\n                ],\n                exports: [\n                    GaEventDirective,\n                    GaEventCategoryDirective,\n                    GaEventFormInputDirective\n                ]\n            },] }\n];\n\n/**\n * Attach a listener to `NavigationEnd` Router event. So, every time Router finish the page resolution it should call `NavigationEnd` event.\n * We assume that NavigationEnd is the final page resolution and call GA `page_view` command.\n *\n * To avoid double binds, we also destroy the subscription when de Bootstrap Component is destroied. But, we don't know for sure\n * that this strategy does not cause double bind on multiple bootstrap components.\n *\n * We are using de component's injector reference to resolve Router, sou I hope there is no problem w/ double bing.\n *\n * If you have this problem, I encourage not Use NgxGoogleAnalyticsRouterModule and atach the listener on AppComponent initialization.\n *\n * This Module is just a sugar for:\n *\n```typescript\nconstructor(private router: Router) {}\n...\nngOnInit() {\n  ...\n  this.router\n    .events\n    .pipe(takeUntil(this.onDestroy$))\n    .subscribe(event => {\n      if (event instanceof NavigationEnd) {\n        gaService.pageView(event.urlAfterRedirects, undefined);\n      }\n    });\n```\n */\nclass NgxGoogleAnalyticsRouterModule {\n    static forRoot(settings) {\n        return {\n            ngModule: NgxGoogleAnalyticsRouterModule,\n            providers: [\n                {\n                    provide: NGX_GOOGLE_ANALYTICS_ROUTING_SETTINGS_TOKEN,\n                    useValue: settings !== null && settings !== void 0 ? settings : {}\n                }\n            ]\n        };\n    }\n}\nNgxGoogleAnalyticsRouterModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    NgxGoogleAnalyticsModule\n                ],\n                providers: [\n                    NGX_GOOGLE_ANALYTICS_ROUTER_INITIALIZER_PROVIDER\n                ],\n                declarations: []\n            },] }\n];\n\n/*\n * Public API Surface of ngx-google-analytics\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { GaActionEnum, GaEventCategoryDirective, GaEventDirective, GaEventFormInputDirective, GoogleAnalyticsInitializer, GoogleAnalyticsRouterInitializer, GoogleAnalyticsService, NGX_DATA_LAYER, NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER, NGX_GOOGLE_ANALYTICS_ROUTER_INITIALIZER_PROVIDER, NGX_GOOGLE_ANALYTICS_ROUTING_SETTINGS_TOKEN, NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN, NGX_GTAG_FN, NGX_WINDOW, NgxGoogleAnalyticsModule, NgxGoogleAnalyticsRouterModule, getDataLayerFn, getGtagFn, getWindow };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}