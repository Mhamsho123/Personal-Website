{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\nimport * as i2 from \"@angular/common\";\nexport class LanguageService {\n  constructor(translateService, location) {\n    this.translateService = translateService;\n    this.location = location;\n  }\n  initLanguage() {\n    this.translateService.addLangs([\"en\", \"es\"]);\n    let language = navigator.language || navigator.userLanguage;\n    language = language.split(\"-\").includes(\"es\") ? \"es\" : \"en\";\n    this.translateService.setDefaultLang(language);\n    // Change the URL without navigate:\n    this.location.go(language);\n    this.language = language;\n  }\n  changeLanguage(language) {\n    this.translateService.setDefaultLang(language);\n    this.location.go(language);\n    this.language = language;\n  }\n  static #_ = this.ɵfac = function LanguageService_Factory(t) {\n    return new (t || LanguageService)(i0.ɵɵinject(i1.TranslateService), i0.ɵɵinject(i2.Location));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LanguageService,\n    factory: LanguageService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["LanguageService","constructor","translateService","location","initLanguage","addLangs","language","navigator","userLanguage","split","includes","setDefaultLang","go","changeLanguage","_","i0","ɵɵinject","i1","TranslateService","i2","Location","_2","factory","ɵfac","providedIn"],"sources":["/Users/mohamadhamsho/Desktop/Personal-Website-main/src/app/services/language/language.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Location } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LanguageService {\n\n  language: \"es\" | \"en\";\n\n  constructor(\n    public translateService: TranslateService,\n    private location: Location,\n  ) {}\n\n  initLanguage(){\n    this.translateService.addLangs([\"en\", \"es\"])\n    let language = navigator.language || (navigator as any).userLanguage;\n    language = language.split(\"-\").includes(\"es\") ? \"es\" : \"en\"\n    this.translateService.setDefaultLang(language)\n\n    // Change the URL without navigate:\n    this.location.go(language)\n\n    this.language=language\n  }\n\n  changeLanguage(language){\n    this.translateService.setDefaultLang(language)\n    this.location.go(language)\n    this.language=language\n  }\n}\n"],"mappings":";;;AAOA,OAAM,MAAOA,eAAe;EAI1BC,YACSC,gBAAkC,EACjCC,QAAkB;IADnB,KAAAD,gBAAgB,GAAhBA,gBAAgB;IACf,KAAAC,QAAQ,GAARA,QAAQ;EACf;EAEHC,YAAYA,CAAA;IACV,IAAI,CAACF,gBAAgB,CAACG,QAAQ,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC5C,IAAIC,QAAQ,GAAGC,SAAS,CAACD,QAAQ,IAAKC,SAAiB,CAACC,YAAY;IACpEF,QAAQ,GAAGA,QAAQ,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,GAAG,IAAI;IAC3D,IAAI,CAACR,gBAAgB,CAACS,cAAc,CAACL,QAAQ,CAAC;IAE9C;IACA,IAAI,CAACH,QAAQ,CAACS,EAAE,CAACN,QAAQ,CAAC;IAE1B,IAAI,CAACA,QAAQ,GAACA,QAAQ;EACxB;EAEAO,cAAcA,CAACP,QAAQ;IACrB,IAAI,CAACJ,gBAAgB,CAACS,cAAc,CAACL,QAAQ,CAAC;IAC9C,IAAI,CAACH,QAAQ,CAACS,EAAE,CAACN,QAAQ,CAAC;IAC1B,IAAI,CAACA,QAAQ,GAACA,QAAQ;EACxB;EAAC,QAAAQ,CAAA,G;qBAzBUd,eAAe,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,gBAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,QAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAfrB,eAAe;IAAAsB,OAAA,EAAftB,eAAe,CAAAuB,IAAA;IAAAC,UAAA,EAFd;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}